#include <Arduino.h>
#include <Wire.h>    //Include wire library 
#include <MPU6050_light.h>  //Include library for MPU communication
//int j=0;
//#include <SoftwareSerial.h>
const int buzzerPin = 1; 
int ENA=3;
int ENB=11;
#include <Adafruit_LiquidCrystal.h>
const int MPU_addr=0x68;
int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ;
MPU6050 mpu(Wire);   //Create object mpu
//unsigned long timer = 0; 
unsigned long previousMillis = 0;
const long interval = 1000;
//float RateRoll, RatePitch, RateYaw;
//float AccX, AccY, AccZ;
//float AngleRoll, AnglePitch;
//float LoopTimer;

int minVal=265;
int maxVal=402;
int speed;
double x;
double y;
double z;
int seconds = 0;
const int pin_RS = 8; 
const int pin_EN = 9; 
const int pin_d4 = 4; 
const int pin_d5 = 5; 
const int pin_d6 = 6; 
const int pin_d7 = 7; 
//int trigPin = 12; 
//int echoPin = 13;
const int pin_BL = 10; 
int in1=A0;
int in2=A1;
int in3=A2;
int in4=A3;
int RS=12;
int LS=13;

const int DO_PIN =2;

const float distancePerPulse=0.55;
volatile unsigned long pulseCount=0;
unsigned long totalDistance=0;
//int trigPin = 12; 
//int echoPin = 13;

double angle;
Adafruit_LiquidCrystal lcd_1( pin_RS,  pin_EN,  pin_d4,  pin_d5,  pin_d6,  pin_d7);

void pulseISR(){
pulseCount++;
}
void timer2(){
unsigned long currentMillis = millis();

if (currentMillis - previousMillis >= interval) {
previousMillis = currentMillis;  // Reset the timer

unsigned long elapsedSeconds = currentMillis / 1000;
lcd_1.setCursor(0,1);
lcd_1.print(elapsedSeconds);

}
}
void timer()
{
lcd_1.setCursor(12, 1);
lcd_1.print(seconds);
lcd_1.setBacklight(1);
delay(500); // Wait for 500 millisecond(s)
lcd_1.setBacklight(0);
delay(500); // Wait for 500 millisecond(s)
seconds+=1;
}

void ir(){
lcd_1.setCursor(0, 1);
lcd_1.print(digitalRead(LS));
lcd_1.print(digitalRead(RS));
}
int i =0;
int j=0;
void setup() {
//Serial.begin(57600);
//pinMode(13, OUTPUT);
//digitalWrite(13, HIGH);
//Wire.setClock(400000);
Wire.begin();
delay(250);
Wire.beginTransmission(0x68); 
Wire.write(0x6B);
Wire.write(0x00);
Wire.endTransmission();     
mpu.begin();     

mpu.calcGyroOffsets(); //Calibrate gyroscope
Wire.begin();
Wire.beginTransmission(MPU_addr);
Wire.write(0x6B);
Wire.write(0);
Wire.endTransmission(true);
pinMode(ENA,OUTPUT);
pinMode(ENB,OUTPUT);
pinMode(in1,OUTPUT);
pinMode(in2,OUTPUT);
pinMode(in3,OUTPUT);
pinMode(in4,OUTPUT);
pinMode(buzzerPin, OUTPUT);
lcd_1.begin(16, 2);
// pinMode(trigPin, OUTPUT);
//pinMode(echoPin, INPUT);

pinMode(LS,INPUT);
pinMode(RS,INPUT);

pinMode(DO_PIN,INPUT_PULLUP);
attachInterrupt(digitalPinToInterrupt(DO_PIN),pulseISR,FALLING);
digitalWrite(in1,HIGH);
digitalWrite(in2,LOW);
digitalWrite(in3,LOW);
digitalWrite(in4,HIGH);
//pinMode(trigPin, OUTPUT);
//pinMode(echoPin, INPUT);
}
void movebackward(){
digitalWrite(in1,HIGH);
digitalWrite(in2,LOW);
digitalWrite(in3,LOW);
digitalWrite(in4,HIGH);
lcd_1.setCursor(5, 1);
lcd_1.print("moveb");

}
void moveforward(){
digitalWrite(in1,LOW);
digitalWrite(in2,HIGH);
digitalWrite(in3,HIGH);
digitalWrite(in4,LOW);
lcd_1.setCursor(5, 1);
lcd_1.print("move");

}
void brake(){
digitalWrite(in1,LOW);
digitalWrite(in2,LOW);
digitalWrite(in3,LOW);
digitalWrite(in4,LOW);
lcd_1.setCursor(5, 1);
lcd_1.print("brake");
}
void turnRight(){
digitalWrite(in1,HIGH);
digitalWrite(in2,LOW);
digitalWrite(in3,HIGH);
digitalWrite(in4,LOW);
lcd_1.setCursor(5, 1);
lcd_1.print("right");
}
void turnLeft(){
digitalWrite(in1,LOW);
digitalWrite(in2,HIGH);
digitalWrite(in3,LOW);
digitalWrite(in4,HIGH);
lcd_1.setCursor(5, 1);
lcd_1.print("left");
}
void week1(){
int i=0;
while(i<11)
{
timer();
moveforward();
analogWrite(ENB,60);
analogWrite(ENA,60);
//turnLeft();
i+=1;
}
brake();
delay(100000);
}


void followline(int speed){
if(!digitalRead(LS)&& !digitalRead(RS))     // Move Forward
{
moveforward();
analogWrite(ENB,speed);
analogWrite(ENA,speed);
}
if((digitalRead(RS)) && !(digitalRead(LS)))     // Turn right
{
turnLeft();
analogWrite(ENA,speed+130);
analogWrite(ENB,speed+130);
}
if(!(digitalRead(RS)) && (digitalRead(LS)))     // turn left
{
turnRight();
analogWrite(ENA,speed+130);
analogWrite(ENB,speed+130);
}
{
if((digitalRead(LS)) && (digitalRead(RS)))
brake();  
}
}

long dist=0;
long distA=0;
long distB=0;

long distance(){
totalDistance=pulseCount*distancePerPulse;
return totalDistance;
}
/*
void obstacle() {
// Send distance data to the receiver Arduino
long duration, distance;
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
duration = pulseIn(echoPin, HIGH);
distance = (duration / 2) / 29.1;
Serial.println(distance);
delay(100); // Adjust the delay as needed
if(distance>15){
moveforward();
analogWrite(ENA,50);
analogWrite(ENB,50);
}else{
brake();
}
}
*/


long MPU6050(){
Wire.beginTransmission(MPU_addr);
Wire.write(0x3B);
Wire.endTransmission(false);
Wire.requestFrom(MPU_addr,14,true);
AcX=Wire.read()<<8|Wire.read();
AcY=Wire.read()<<8|Wire.read();
AcZ=Wire.read()<<8|Wire.read();
int xAng = map(AcX,minVal,maxVal,-90,90);
int yAng = map(AcY,minVal,maxVal,-90,90);
int zAng = map(AcZ,minVal,maxVal,-90,90);
delay(500);
y= RAD_TO_DEG * (atan2(-xAng, -zAng)+PI);
return y;
}

/*
int MPU2(){
mpu.update(); 
int angY=0;   //Get values from MPU
if ((millis() - timer) > 100) { // print data every 100ms
timer = millis();
lcd_1.clear();
lcd_1.print(" Angle: ");
lcd_1.print(int(mpu.getAngleY())); 
angY=int(mpu.getAngleY());
//delay(10);
return (angY);    //Print X angle value on LCD 

}
}*/

void week3(long angle) {
int i = 0;

do {
// Accelerate on the ramp
followline(100);
angle = MPU6050(); // Update angle inside the loop

// Update LCD display or any other feedback
lcd_1.setCursor(0, 1);
lcd_1.print("Accelerating ");
lcd_1.print(angle);

} while (angle < 155);

brake();
i += 1;

if (i == 1) {
while (pulseCount != 20) {
// Make a 360-degree turn
turnLeft();
analogWrite(ENA, 150);
analogWrite(ENB, 150);
followline(60);

// Update angle continuously even during the turn
angle = MPU6050();
}
}
}

void ulti(double AngleRoll){
long angleY=AngleRoll;
//Serial.println(angleY);
// unsigned long y;
// y=MPU6050();
if (angleY>0.6){
long angleY=AngleRoll;
brake();
movebackward();
analogWrite(ENA,100);
analogWrite(ENB,100);
delay(200);
}else{
long angleY=AngleRoll; 
moveforward();
analogWrite(ENA,130);
analogWrite(ENB,130);
}
}

int calDist(){
dist=distance();
// timer();
return dist;

}

int finalAng=0;
void loop(){
if (i==0){
j=MPU6050();
//Serial.println(j);
while(j<=185){
//Serial.println(j);
j=MPU6050();
lcd_1.clear();
lcd_1.print(j);
moveforward();
analogWrite(ENA,120);
analogWrite(ENB,120);
finalAng=90-j;
}
brake();
delay(2000);
digitalWrite(buzzerPin, HIGH);
delay(100);
digitalWrite(buzzerPin, LOW);
i++;
}

if(i==1){
//int b =ba();
moveforward();
analogWrite(ENA,200);
analogWrite(ENB,200);
delay(1000);
brake();
lcd_1.clear();
lcd_1.setCursor(0,0);
lcd_1.print((finalAng));
delay(4000);
digitalWrite(buzzerPin, HIGH);
delay(100);
digitalWrite(buzzerPin, LOW);
i++;
}

if(i==2){
lcd_1.clear();
turnLeft();
analogWrite(ENA,255);
analogWrite(ENB,255);
delay(1100);
brake();
delay(2000);
moveforward();
analogWrite(ENA,70);
analogWrite(ENB,70);
delay(1500);
brake();
digitalWrite(buzzerPin, HIGH);
delay(100);
digitalWrite(buzzerPin, LOW);
i++;
distA=0;
pulseCount=0;
}

if (i==3){
distA=distance();
while (distA<=40){
followline(60);
distA=distance();
lcd_1.setCursor(0,0);
lcd_1.print("Distance:");
lcd_1.setCursor(9,0);
lcd_1.print(distA);
}
brake();
delay(3000);
//lcd_1.setCursor(8,1);
//lcd_1.print(dist);
lcd_1.clear();
pulseCount=0;
digitalWrite(buzzerPin, HIGH);
delay(100);
digitalWrite(buzzerPin, LOW);
i++;
}

if(i==4){
followline(60);
timer2();
distB=distance()+40;
lcd_1.setCursor(0,0);
lcd_1.print("Distance:");
lcd_1.setCursor(9,0);
lcd_1.print(distB);
}
}


//int z=0;
void ramp2(){
turnLeft();
analogWrite(ENA,255);
analogWrite(ENB,255);
delay(1200);
brake();
delay(4000);
return(0);
j++;

}
